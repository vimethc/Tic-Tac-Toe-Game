{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { io } from 'socket.io-client';\nlet GameComponent = class GameComponent {\n  constructor() {\n    this.board = Array(9).fill(null);\n    this.player = '';\n    this.currentTurn = 'X';\n    this.gameId = 'game1';\n    this.status = '';\n    this.isGameOver = false;\n    this.socket = io('http://localhost:3000');\n    this.player = Math.random() < 0.5 ? 'X' : 'O';\n  }\n  ngOnInit() {\n    this.socket.emit('joinGame', {\n      gameId: this.gameId,\n      player: this.player\n    });\n    this.updateStatus();\n    this.socket.on('gameState', gameState => {\n      this.board = gameState.board;\n      this.currentTurn = gameState.currentTurn;\n      this.updateStatus();\n    });\n    this.socket.on('gameOver', data => {\n      this.isGameOver = true;\n      if (data.winner) {\n        this.status = data.winner === this.player ? 'You won!' : 'You lost!';\n      } else {\n        this.status = \"It's a draw!\";\n      }\n      // Reset after 2 seconds\n      setTimeout(() => {\n        this.isGameOver = false;\n        this.board = Array(9).fill(null);\n        this.currentTurn = 'X';\n        this.updateStatus();\n      }, 2000);\n    });\n  }\n  updateStatus() {\n    if (!this.isGameOver) {\n      this.status = this.currentTurn === this.player ? 'Your turn!' : \"Opponent's turn!\";\n    }\n  }\n  makeMove(index) {\n    if (!this.board[index] && this.currentTurn === this.player && !this.isGameOver) {\n      this.socket.emit('makeMove', {\n        gameId: this.gameId,\n        index: index,\n        player: this.player\n      });\n    }\n  }\n  ngOnDestroy() {\n    if (this.socket) {\n      this.socket.disconnect();\n    }\n  }\n};\nGameComponent = __decorate([Component({\n  selector: 'app-game',\n  templateUrl: './game.component.html',\n  styleUrls: ['./game.component.css']\n})], GameComponent);\nexport { GameComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAA2B,eAAe;AAC5D,SAAiBC,EAAE,QAAQ,kBAAkB;AAOtC,IAAMC,aAAa,GAAnB,MAAMA,aAAa;EASxBC;IAPA,UAAK,GAAaC,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;IACrC,WAAM,GAAW,EAAE;IACnB,gBAAW,GAAW,GAAG;IACzB,WAAM,GAAW,OAAO;IACxB,WAAM,GAAW,EAAE;IACnB,eAAU,GAAY,KAAK;IAGzB,IAAI,CAACC,MAAM,GAAGL,EAAE,CAAC,uBAAuB,CAAC;IACzC,IAAI,CAACM,MAAM,GAAGC,IAAI,CAACC,MAAM,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;EAC/C;EAEAC,QAAQ;IACN,IAAI,CAACJ,MAAM,CAACK,IAAI,CAAC,UAAU,EAAE;MAAEC,MAAM,EAAE,IAAI,CAACA,MAAM;MAAEL,MAAM,EAAE,IAAI,CAACA;IAAM,CAAE,CAAC;IAC1E,IAAI,CAACM,YAAY,EAAE;IAEnB,IAAI,CAACP,MAAM,CAACQ,EAAE,CAAC,WAAW,EAAGC,SAAc,IAAI;MAC7C,IAAI,CAACC,KAAK,GAAGD,SAAS,CAACC,KAAK;MAC5B,IAAI,CAACC,WAAW,GAAGF,SAAS,CAACE,WAAW;MACxC,IAAI,CAACJ,YAAY,EAAE;IACrB,CAAC,CAAC;IAEF,IAAI,CAACP,MAAM,CAACQ,EAAE,CAAC,UAAU,EAAGI,IAAS,IAAI;MACvC,IAAI,CAACC,UAAU,GAAG,IAAI;MACtB,IAAID,IAAI,CAACE,MAAM,EAAE;QACf,IAAI,CAACC,MAAM,GAAGH,IAAI,CAACE,MAAM,KAAK,IAAI,CAACb,MAAM,GAAG,UAAU,GAAG,WAAW;OACrE,MAAM;QACL,IAAI,CAACc,MAAM,GAAG,cAAc;;MAG9B;MACAC,UAAU,CAAC,MAAK;QACd,IAAI,CAACH,UAAU,GAAG,KAAK;QACvB,IAAI,CAACH,KAAK,GAAGZ,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;QAChC,IAAI,CAACY,WAAW,GAAG,GAAG;QACtB,IAAI,CAACJ,YAAY,EAAE;MACrB,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,CAAC;EACJ;EAEAA,YAAY;IACV,IAAI,CAAC,IAAI,CAACM,UAAU,EAAE;MACpB,IAAI,CAACE,MAAM,GAAG,IAAI,CAACJ,WAAW,KAAK,IAAI,CAACV,MAAM,GAC5C,YAAY,GACZ,kBAAkB;;EAExB;EAEAgB,QAAQ,CAACC,KAAa;IACpB,IAAI,CAAC,IAAI,CAACR,KAAK,CAACQ,KAAK,CAAC,IAAI,IAAI,CAACP,WAAW,KAAK,IAAI,CAACV,MAAM,IAAI,CAAC,IAAI,CAACY,UAAU,EAAE;MAC9E,IAAI,CAACb,MAAM,CAACK,IAAI,CAAC,UAAU,EAAE;QAC3BC,MAAM,EAAE,IAAI,CAACA,MAAM;QACnBY,KAAK,EAAEA,KAAK;QACZjB,MAAM,EAAE,IAAI,CAACA;OACd,CAAC;;EAEN;EAEAkB,WAAW;IACT,IAAI,IAAI,CAACnB,MAAM,EAAE;MACf,IAAI,CAACA,MAAM,CAACoB,UAAU,EAAE;;EAE5B;CACD;AAjEYxB,aAAa,eALzBF,SAAS,CAAC;EACT2B,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,uBAAuB;EACpCC,SAAS,EAAE,CAAC,sBAAsB;CACnC,CAAC,GACW3B,aAAa,CAiEzB;SAjEYA,aAAa","names":["Component","io","GameComponent","constructor","Array","fill","socket","player","Math","random","ngOnInit","emit","gameId","updateStatus","on","gameState","board","currentTurn","data","isGameOver","winner","status","setTimeout","makeMove","index","ngOnDestroy","disconnect","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/chamma/Desktop/tic-tac-toe-game/frontend/src/app/game/game.component.ts"],"sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Socket, io } from 'socket.io-client';\n\n@Component({\n  selector: 'app-game',\n  templateUrl: './game.component.html',\n  styleUrls: ['./game.component.css']\n})\nexport class GameComponent implements OnInit, OnDestroy {\n  private socket: any;\n  board: string[] = Array(9).fill(null);\n  player: string = '';\n  currentTurn: string = 'X';\n  gameId: string = 'game1';\n  status: string = '';\n  isGameOver: boolean = false;\n\n  constructor() {\n    this.socket = io('http://localhost:3000');\n    this.player = Math.random() < 0.5 ? 'X' : 'O';\n  }\n\n  ngOnInit(): void {\n    this.socket.emit('joinGame', { gameId: this.gameId, player: this.player });\n    this.updateStatus();\n\n    this.socket.on('gameState', (gameState: any) => {\n      this.board = gameState.board;\n      this.currentTurn = gameState.currentTurn;\n      this.updateStatus();\n    });\n\n    this.socket.on('gameOver', (data: any) => {\n      this.isGameOver = true;\n      if (data.winner) {\n        this.status = data.winner === this.player ? 'You won!' : 'You lost!';\n      } else {\n        this.status = \"It's a draw!\";\n      }\n      \n      // Reset after 2 seconds\n      setTimeout(() => {\n        this.isGameOver = false;\n        this.board = Array(9).fill(null);\n        this.currentTurn = 'X';\n        this.updateStatus();\n      }, 2000);\n    });\n  }\n\n  updateStatus(): void {\n    if (!this.isGameOver) {\n      this.status = this.currentTurn === this.player ? \n        'Your turn!' : \n        \"Opponent's turn!\";\n    }\n  }\n\n  makeMove(index: number): void {\n    if (!this.board[index] && this.currentTurn === this.player && !this.isGameOver) {\n      this.socket.emit('makeMove', {\n        gameId: this.gameId,\n        index: index,\n        player: this.player\n      });\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.socket) {\n      this.socket.disconnect();\n    }\n  }\n} "]},"metadata":{},"sourceType":"module","externalDependencies":[]}