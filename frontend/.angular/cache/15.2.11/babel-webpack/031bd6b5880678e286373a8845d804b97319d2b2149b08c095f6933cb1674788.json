{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { io } from 'socket.io-client';\nlet GameComponent = class GameComponent {\n  constructor() {\n    this.board = Array(9).fill(null);\n    this.currentPlayer = 'X';\n    this.gameId = 'game1';\n    this.gameStatus = 'Waiting for players...';\n    this.isGameOver = false;\n    this.winner = null;\n    this.socket = io('http://localhost:3000', {\n      withCredentials: true,\n      transports: ['polling', 'websocket'],\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000\n    });\n    this.setupSocketListeners();\n  }\n  ngOnInit() {\n    this.joinGame();\n  }\n  ngOnDestroy() {\n    if (this.socket) {\n      this.socket.disconnect();\n    }\n  }\n  setupSocketListeners() {\n    this.socket.on('connect', () => {\n      console.log('Connected to server');\n      this.gameStatus = 'Connected to game server';\n    });\n    this.socket.on('disconnect', () => {\n      console.log('Disconnected from server');\n      this.gameStatus = 'Disconnected from game server';\n    });\n    this.socket.on('gameState', gameState => {\n      console.log('Received game state:', gameState);\n      this.board = gameState.board;\n      this.currentPlayer = gameState.currentTurn;\n      this.gameStatus = `Current turn: ${gameState.currentTurn}`;\n    });\n    this.socket.on('gameOver', data => {\n      this.isGameOver = true;\n      this.winner = data.winner;\n      this.gameStatus = data.winner ? `Game Over! Winner: ${data.winner}` : 'Game Over! It\\'s a draw!';\n    });\n    this.socket.on('connect_error', error => {\n      console.error('Connection error:', error);\n      this.gameStatus = 'Connection error. Retrying...';\n    });\n  }\n  joinGame() {\n    const player = Math.random() < 0.5 ? 'X' : 'O';\n    this.socket.emit('joinGame', {\n      gameId: this.gameId,\n      player\n    });\n  }\n  makeMove(index) {\n    if (!this.isGameOver && this.board[index] === null) {\n      this.socket.emit('makeMove', {\n        gameId: this.gameId,\n        index: index,\n        player: this.currentPlayer\n      });\n    }\n  }\n  restartGame() {\n    this.board = Array(9).fill(null);\n    this.isGameOver = false;\n    this.winner = null;\n    this.joinGame();\n  }\n};\nGameComponent = __decorate([Component({\n  selector: 'app-game',\n  templateUrl: './game.component.html',\n  styleUrls: ['./game.component.css']\n})], GameComponent);\nexport { GameComponent };","map":{"version":3,"mappings":"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","names":["Component","io","GameComponent","constructor","Array","fill","socket","withCredentials","transports","reconnectionAttempts","reconnectionDelay","setupSocketListeners","ngOnInit","joinGame","ngOnDestroy","disconnect","on","console","log","gameStatus","gameState","board","currentPlayer","currentTurn","data","isGameOver","winner","error","player","Math","random","emit","gameId","makeMove","index","restartGame","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/chamma/Desktop/tic-tac-toe-game/frontend/src/app/game/game.component.ts"],"sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Socket as ClientSocket, io } from 'socket.io-client';\n\n@Component({\n  selector: 'app-game',\n  templateUrl: './game.component.html',\n  styleUrls: ['./game.component.css']\n})\nexport class GameComponent implements OnInit, OnDestroy {\n  private socket: ClientSocket;\n  board: (string | null)[] = Array(9).fill(null);\n  currentPlayer: string = 'X';\n  gameId: string = 'game1';\n  gameStatus: string = 'Waiting for players...';\n  isGameOver: boolean = false;\n  winner: string | null = null;\n\n  constructor() {\n    this.socket = io('http://localhost:3000', {\n      withCredentials: true,\n      transports: ['polling', 'websocket'],\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000\n    });\n\n    this.setupSocketListeners();\n  }\n\n  ngOnInit(): void {\n    this.joinGame();\n  }\n\n  ngOnDestroy(): void {\n    if (this.socket) {\n      this.socket.disconnect();\n    }\n  }\n\n  private setupSocketListeners(): void {\n    this.socket.on('connect', () => {\n      console.log('Connected to server');\n      this.gameStatus = 'Connected to game server';\n    });\n\n    this.socket.on('disconnect', () => {\n      console.log('Disconnected from server');\n      this.gameStatus = 'Disconnected from game server';\n    });\n\n    this.socket.on('gameState', (gameState: any) => {\n      console.log('Received game state:', gameState);\n      this.board = gameState.board;\n      this.currentPlayer = gameState.currentTurn;\n      this.gameStatus = `Current turn: ${gameState.currentTurn}`;\n    });\n\n    this.socket.on('gameOver', (data: { winner: string | null }) => {\n      this.isGameOver = true;\n      this.winner = data.winner;\n      this.gameStatus = data.winner ? `Game Over! Winner: ${data.winner}` : 'Game Over! It\\'s a draw!';\n    });\n\n    this.socket.on('connect_error', (error: Error) => {\n      console.error('Connection error:', error);\n      this.gameStatus = 'Connection error. Retrying...';\n    });\n  }\n\n  private joinGame(): void {\n    const player = Math.random() < 0.5 ? 'X' : 'O';\n    this.socket.emit('joinGame', { gameId: this.gameId, player });\n  }\n\n  makeMove(index: number): void {\n    if (!this.isGameOver && this.board[index] === null) {\n      this.socket.emit('makeMove', {\n        gameId: this.gameId,\n        index: index,\n        player: this.currentPlayer\n      });\n    }\n  }\n\n  restartGame(): void {\n    this.board = Array(9).fill(null);\n    this.isGameOver = false;\n    this.winner = null;\n    this.joinGame();\n  }\n} "]},"metadata":{},"sourceType":"module","externalDependencies":[]}